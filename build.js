const fs = require('fs');
const path = require('path');
const babel = require('@babel/core');

// Configuration
const config = {
  presets: ['@babel/preset-react'],
  // Keep the code readable and maintain formatting
  compact: false,
  comments: true
};

// Files to transpile
const filesToTranspile = [
  {
    input: 'js/components.js',
    output: 'js/components.compiled.js'
  },
  {
    input: 'js/app.js',
    output: 'js/app.compiled.js'
  }
];

// Function to transpile a single file
function transpileFile(inputPath, outputPath) {
  try {
    console.log(`Transpiling ${inputPath} -> ${outputPath}`);
    
    // Read the source file
    const sourceCode = fs.readFileSync(inputPath, 'utf8');
    
    // Transpile with Babel
    const result = babel.transformSync(sourceCode, {
      ...config,
      filename: inputPath
    });
    
    // Add a header comment to the compiled file
    const header = `// This file is auto-generated from ${inputPath}\n// Do not edit this file directly - edit the source file instead\n// Generated at: ${new Date().toISOString()}\n\n`;
    const compiledCode = header + result.code;
    
    // Write the compiled file
    fs.writeFileSync(outputPath, compiledCode, 'utf8');
    
    console.log(`‚úÖ Successfully transpiled ${inputPath}`);
    return true;
  } catch (error) {
    console.error(`‚ùå Error transpiling ${inputPath}:`, error.message);
    return false;
  }
}

// Function to transpile all files
function transpileAll() {
  console.log('üîÑ Starting transpilation...\n');
  
  let success = true;
  for (const file of filesToTranspile) {
    if (!transpileFile(file.input, file.output)) {
      success = false;
    }
  }
  
  if (success) {
    console.log('\n‚úÖ All files transpiled successfully!');
    console.log('\nüìù Next steps:');
    console.log('1. Update your HTML to use the compiled files');
    console.log('2. Run "npm run serve" to start a local server');
  } else {
    console.log('\n‚ùå Some files failed to transpile');
    process.exit(1);
  }
}

// Watch mode functionality
function setupWatchMode() {
  const chokidar = require('chokidar');
  
  console.log('üëÄ Watch mode enabled - watching for file changes...\n');
  
  // Initial transpilation
  transpileAll();
  
  // Watch for changes
  const watchPaths = filesToTranspile.map(f => f.input);
  const watcher = chokidar.watch(watchPaths, {
    persistent: true,
    ignoreInitial: true
  });
  
  watcher.on('change', (filePath) => {
    console.log(`\nüìù File changed: ${filePath}`);
    
    // Find the corresponding output file
    const fileConfig = filesToTranspile.find(f => f.input === filePath);
    if (fileConfig) {
      transpileFile(fileConfig.input, fileConfig.output);
    }
  });
  
  console.log('\n‚å®Ô∏è  Press Ctrl+C to stop watching\n');
}

// Main execution
function main() {
  const args = process.argv.slice(2);
  const watchMode = args.includes('--watch') || args.includes('-w');
  
  if (watchMode) {
    setupWatchMode();
  } else {
    transpileAll();
  }
}

// Run the script
if (require.main === module) {
  main();
}

module.exports = { transpileFile, transpileAll };
